parameters:
# assumption componentName and pipeline name the same
- name: componentName
  type: string
  default: ''
- name: fileFilter
  type: string
  default: ''

- name: dependencySource
  type: string
  default: staging
  values:
    - staging
    - tag-builds
- name: componentPipelineIds
  type: object
  default:
    AMDMIGraphX:
      staging: $(AMDMIGRAPHX_PIPELINE_ID)
      tag-builds: $(AMDMIGRAPHX_TAGGED_PIPELINE_ID)
    amdsmi:
      staging: $(AMDSMI_PIPELINE_ID)
      tag-builds: $(AMDSMI_TAGGED_PIPELINE_ID)
    aomp-extras:
      staging: $(AOMP_EXTRAS_PIPELINE_ID)
      tag-builds: $(AOMP_EXTRAS_TAGGED_PIPELINE_ID)
    aomp:
      staging: $(AOMP_PIPELINE_ID)
      tag-builds: $(AOMP_TAGGED_PIPELINE_ID)
    clr:
      staging: $(CLR_PIPELINE_ID)
      tag-builds: $(CLR_TAGGED_PIPELINE_ID)
    composable_kernel:
      staging: $(COMPOSABLE_KERNEL_PIPELINE_ID)
      tag-builds: $(COMPOSABLE_KERNEL_TAGGED_PIPELINE_ID)
    half:
      staging: $(HALF_PIPELINE_ID)
      tag-builds: $(HALF_TAGGED_PIPELINE_ID)
    HIP:
      staging: $(HIP_PIPELINE_ID)
      tag-builds: $(HIP_TAGGED_PIPELINE_ID)
    hip-tests:
      staging: $(HIP_TESTS_PIPELINE_ID)
      tag-builds: $(HIP_TESTS_TAGGED_PIPELINE_ID)
    hipBLAS:
      staging: $(HIPBLAS_PIPELINE_ID)
      tag-builds: $(HIPBLAS_TAGGED_PIPELINE_ID)
    hipBLAS-common:
      staging: $(HIPBLAS_COMMON_PIPELINE_ID)
      tag-builds: $(HIPBLAS_COMMON_TAGGED_PIPELINE_ID)
    hipBLASLt:
      staging: $(HIPBLASLT_PIPELINE_ID)
      tag-builds: $(HIPBLASLT_TAGGED_PIPELINE_ID)
    hipCUB:
      staging: $(HIPCUB_PIPELINE_ID)
      tag-builds: $(HIPCUB_TAGGED_PIPELINE_ID)
    hipFFT:
      staging: $(HIPFFT_PIPELINE_ID)
      tag-builds: $(HIPFFT_TAGGED_PIPELINE_ID)
    hipfort:
      staging: $(HIPFORT_PIPELINE_ID)
      tag-builds: $(HIPFORT_TAGGED_PIPELINE_ID)
    HIPIFY:
      staging: $(HIPIFY_PIPELINE_ID)
      tag-builds: $(HIPIFY_TAGGED_PIPELINE_ID)
    hipRAND:
      staging: $(HIPRAND_PIPELINE_ID)
      tag-builds: $(HIPRAND_TAGGED_PIPELINE_ID)
    hipSOLVER:
      staging: $(HIPSOLVER_PIPELINE_ID)
      tag-builds: $(HIPSOLVER_TAGGED_PIPELINE_ID)
    hipSPARSE:
      staging: $(HIPSPARSE_PIPELINE_ID)
      tag-builds: $(HIPSPARSE_TAGGED_PIPELINE_ID)
    hipSPARSELt:
      staging: $(HIPSPARSELT_PIPELINE_ID)
      tag-builds: $(HIPSPARSELT_TAGGED_PIPELINE_ID)
    hipTensor:
      staging: $(HIPTENSOR_PIPELINE_ID)
      tag-builds: $(HIPTENSOR_TAGGED_PIPELINE_ID)
    llvm-project:
      staging: $(LLVM_PROJECT_PIPELINE_ID)
      tag-builds: $(LLVM_PROJECT_TAGGED_PIPELINE_ID)
    MIOpen:
      staging: $(MIOpen_PIPELINE_ID)
      tag-builds: $(MIOpen_TAGGED_PIPELINE_ID)
    MIVisionX:
      staging: $(MIVISIONX_PIPELINE_ID)
      tag-builds: $(MIVISIONX_TAGGED_PIPELINE_ID)
    omniperf:
      staging: $(OMNIPERF_PIPELINE_ID)
      tag-builds: $(OMNIPERF_TAGGED_PIPELINE_ID)
    omnitrace:
      staging: $(OMNITRACE_PIPELINE_ID)
      tag-builds: $(OMNITRACE_TAGGED_PIPELINE_ID)
    rccl:
      staging: $(RCCL_PIPELINE_ID)
      tag-builds: $(RCCL_TAGGED_PIPELINE_ID)
    rdc:
      staging: $(RDC_PIPELINE_ID)
      tag-builds: $(RDC_TAGGED_PIPELINE_ID)
    rocAL:
      staging: $(ROCAL_PIPELINE_ID)
      tag-builds: $(ROCAL_TAGGED_PIPELINE_ID)
    rocALUTION:
      staging: $(ROCALUTION_PIPELINE_ID)
      tag-builds: $(ROCALUTION_TAGGED_PIPELINE_ID)
    rocBLAS:
      staging: $(ROCBLAS_PIPELINE_ID)
      tag-builds: $(ROCBLAS_TAGGED_PIPELINE_ID)
    ROCdbgapi:
      staging: $(ROCDBGAPI_PIPELINE_ID)
      tag-builds: $(ROCDBGAPI_TAGGED_PIPELINE_ID)
    rocDecode:
      staging: $(ROCDECODE_PIPELINE_ID)
      tag-builds: $(ROCDECODE_TAGGED_PIPELINE_ID)
    rocFFT:
      staging: $(ROCFFT_PIPELINE_ID)
      tag-builds: $(ROCFFT_TAGGED_PIPELINE_ID)
    ROCgdb:
      staging: $(ROCGDB_PIPELINE_ID)
      tag-builds: $(ROCGDB_TAGGED_PIPELINE_ID)
    rocm-cmake:
      staging: $(ROCM_CMAKE_PIPELINE_ID)
      tag-builds: $(ROCM_CMAKE_TAGGED_PIPELINE_ID)
    rocm-core:
      staging: $(ROCM_CORE_PIPELINE_ID)
      tag-builds: $(ROCM_CORE_TAGGED_PIPELINE_ID)
    rocm-examples:
      staging: $(ROCM_EXAMPLES_PIPELINE_ID)
      tag-builds: $(ROCM_EXAMPLES_TAGGED_PIPELINE_ID)
    rocminfo:
      staging: $(ROCMINFO_PIPELINE_ID)
      tag-builds: $(ROCMINFO_TAGGED_PIPELINE_ID)
    rocMLIR:
      staging: $(ROCMLIR_PIPELINE_ID)
      tag-builds: $(ROCMLIR_TAGGED_PIPELINE_ID)
    ROCmValidationSuite:
      staging: $(ROCMVALIDATIONSUITE_PIPELINE_ID)
      tag-builds: $(ROCMVALIDATIONSUITE_TAGGED_PIPELINE_ID)
    rocm_bandwidth_test:
      staging: $(ROCM_BANDWIDTH_TEST_PIPELINE_ID)
      tag-builds: $(ROCM_BANDWIDTH_TEST_TAGGED_PIPELINE_ID)
    rocm_smi_lib:
      staging: $(ROCM_SMI_LIB_PIPELINE_ID)
      tag-builds: $(ROCM_SMI_LIB_TAGGED_PIPELINE_ID)
    rocPRIM:
      staging: $(ROCPRIM_PIPELINE_ID)
      tag-builds: $(ROCPRIM_TAGGED_PIPELINE_ID)
    rocprofiler-register:
      staging: $(ROCPROFILER_REGISTER_PIPELINE_ID)
      tag-builds: $(ROCPROFILER_REGISTER_TAGGED_PIPELINE_ID)
    rocprofiler-sdk:
      staging: $(ROCPROFILER_SDK_PIPELINE_ID)
      tag-builds: $(ROCPROFILER_SDK_TAGGED_PIPELINE_ID)
    rocprofiler-systems:
      staging: $(ROCPROFILER_SYSTEMS_PIPELINE_ID)
      tag-builds: $(ROCPROFILER_SYSTEMS_PIPELINE_ID)
    rocprofiler:
      staging: $(ROCPROFILER_PIPELINE_ID)
      tag-builds: $(ROCPROFILER_TAGGED_PIPELINE_ID)
    rocPyDecode:
      staging: $(ROCPYDECODE_PIPELINE_ID)
      tag-builds: $(ROCPYDECODE_TAGGED_PIPELINE_ID)
    ROCR-Runtime:
      staging: $(ROCR_RUNTIME_PIPELINE_ID)
      tag-builds: $(ROCR_RUNTIME_TAGGED_PIPELINE_ID)
    rocRAND:
      staging: $(ROCRAND_PIPELINE_ID)
      tag-builds: $(ROCRAND_TAGGED_PIPELINE_ID)
    rocr_debug_agent:
      staging: $(ROCR_DEBUG_AGENT_PIPELINE_ID)
      tag-builds: $(ROCR_DEBUG_AGENT_TAGGED_PIPELINE_ID)
    rocSOLVER:
      staging: $(ROCSOLVER_PIPELINE_ID)
      tag-builds: $(ROCSOLVER_TAGGED_PIPELINE_ID)
    rocSPARSE:
      staging: $(ROCSPARSE_PIPELINE_ID)
      tag-builds: $(ROCSPARSE_TAGGED_PIPELINE_ID)
    ROCT-Thunk-Interface:
      staging: $(ROCT_THUNK_INTERFACE_PIPELINE_ID)
      tag-builds: $(ROCT_THUNK_INTERFACE_TAGGED_PIPELINE_ID)
    rocThrust:
      staging: $(ROCTHRUST_PIPELINE_ID)
      tag-builds: $(ROCTHRUST_TAGGED_PIPELINE_ID)
    roctracer:
      staging: $(ROCTRACER_PIPELINE_ID)
      tag-builds: $(ROCTRACER_TAGGED_PIPELINE_ID)
    rocWMMA:
      staging: $(ROCWMMA_PIPELINE_ID)
      tag-builds: $(ROCWMMA_TAGGED_PIPELINE_ID)
    rpp:
      staging: $(RPP_PIPELINE_ID)
      tag-builds: $(RPP_TAGGED_PIPELINE_ID)

- name: buildVersionToDownload
  type: string
  default: latestFromBranch
  values:
    - latest
    - latestFromBranch
    - specific
- name: branchToUse
  type: string
  default: staging
  values:
    - staging
    - mainline
    - custom
- name: customBranchName
  type: string
  default: $(Build.SourceBranchName)
- name: componentBranchNames
  type: object
  default:
    AMDMIGraphX:
      staging: develop
      mainline: mainline
    amdsmi:
      staging: amd-staging
      mainline: amd-mainline
    aomp-extras:
      staging: aomp-dev
      mainline: amd-mainline-open
    aomp:
      staging: aomp-dev
      mainline: amd-mainline-open
    clr:
      staging: amd-staging
      mainline: amd-mainline
    composable_kernel:
      staging: develop
      mainline: mainline
    half:
      staging: rocm
      mainline: rocm
    HIP:
      staging: amd-staging
      mainline: amd-mainline
    hip-tests:
      staging: amd-staging
      mainline: amd-mainline
    hipBLAS:
      staging: develop
      mainline: mainline
    hipBLASLt:
      staging: develop
      mainline: mainline
    hipBLAS-common:
      staging: develop
      mainline: mainline
    hipCUB:
      staging: develop
      mainline: mainline
    hipFFT:
      staging: develop
      mainline: mainline
    hipfort:
      staging: develop
      mainline: mainline
    HIPIFY:
      staging: amd-staging
      mainline: amd-mainline
    hipRAND:
      staging: develop
      mainline: mainline
    hipSOLVER:
      staging: develop
      mainline: mainline
    hipSPARSE:
      staging: develop
      mainline: mainline
    hipSPARSELt:
      staging: develop
      mainline: mainline
    hipTensor:
      staging: develop
      mainline: mainline
    llvm-project:
      staging: amd-staging
      mainline: amd-mainline-open
    MIOpen:
      staging: develop
      mainline: mainline
    MIVisionX:
      staging: develop
      mainline: mainline
    omniperf:
      staging: amd-staging
      mainline: amd-mainline
    omnitrace:
      staging: amd-staging
      mainline: amd-mainline
    rccl:
      staging: develop
      mainline: mainline
    rdc:
      staging: amd-staging
      mainline: amd-mainline
    rocAL:
      staging: develop
      mainline: master
    rocALUTION:
      staging: develop
      mainline: mainline
    rocBLAS:
      staging: develop
      mainline: mainline
    ROCdbgapi:
      staging: amd-staging
      mainline: amd-mainline
    rocDecode:
      staging: develop
      mainline: mainline
    rocFFT:
      staging: develop
      mainline: mainline
    ROCgdb:
      staging: amd-staging
      mainline: amd-mainline-rocgdb-15
    rocm-cmake:
      staging: develop
      mainline: mainline
    rocm-core:
      staging: amd-staging
      mainline: amd-master
    rocm-examples:
      staging: develop
      mainline: develop
    rocminfo:
      staging: amd-staging
      mainline: amd-master
    rocMLIR:
      staging: develop
      mainline: mainline
    ROCmValidationSuite:
      staging: master
      mainline: mainline
    rocm_bandwidth_test:
      staging: master
      mainline: master
    rocm_smi_lib:
      staging: amd-staging
      mainline: amd-mainline
    rocPRIM:
      staging: develop
      mainline: mainline
    rocprofiler:
      staging: amd-staging
      mainline: amd-master
    rocprofiler-register:
      staging: amd-staging
      mainline: amd-mainline
    rocprofiler-sdk:
      staging: amd-staging
      mainline: amd-mainline
    rocprofiler-systems:
      staging: amd-staging
      mainline: amd-mainline
    rocPyDecode:
      staging: develop
      mainline: mainline
    ROCR-Runtime:
      staging: amd-staging
      mainline: amd-master
    rocRAND:
      staging: develop
      mainline: mainline
    rocr_debug_agent:
      staging: amd-staging
      mainline: amd-mainline
    rocSOLVER:
      staging: develop
      mainline: mainline
    rocSPARSE:
      staging: develop
      mainline: mainline
    rocThrust:
      staging: develop
      mainline: mainline
    roctracer:
      staging: amd-staging
      mainline: amd-master
    rocWMMA:
      staging: develop
      mainline: mainline
    rpp:
      staging: develop
      mainline: mainline

- name: allowPartiallySucceededBuilds
  type: object
  default:
    - amdsmi
    - aomp
    - HIPIFY
    - MIVisionX
    - omniperf
    - rccl
    - rdc
    - rocm-cmake
    - rocm_smi_lib
    - rocFFT
    - rpp

steps:
- task: DownloadPipelineArtifact@2
  displayName: Download ${{ parameters.componentName }}
  inputs:
    buildType: 'specific'
    project: ROCm-CI
    definition: ${{ parameters.componentPipelineIds[parameters.componentName][parameters.dependencySource] }}
    specificBuildWithTriggering: true
    itemPattern: '**/*${{ parameters.fileFilter }}*'
    ${{ if notIn(parameters.componentName, 'aomp') }}: # remove this once these pipelines are functional + up-to-date
        buildVersionToDownload: ${{ parameters.buildVersionToDownload }} # default is 'latest'
    ${{ if eq(parameters.branchToUse, 'custom') }}:
      branchName: ${{ parameters.customBranchName }}
    ${{ else }}:
      branchName: refs/heads/${{ parameters.componentBranchNames[parameters.componentName][parameters.branchToUse] }}
    ${{ if containsValue(parameters.allowPartiallySucceededBuilds, parameters.componentName) }}:
      allowPartiallySucceededBuilds: true
    targetPath: '$(Pipeline.Workspace)/d'
- task: ExtractFiles@1
  displayName: Extract ${{ parameters.componentName }}
  inputs:
    archiveFilePatterns: '$(Pipeline.Workspace)/d/**/*.tar.gz'
    destinationFolder: '$(Agent.BuildDirectory)/rocm'
    cleanDestinationFolder: false
    overwriteExistingFiles: true
- task: DeleteFiles@1
  displayName: Cleanup Compressed ${{ parameters.componentName }}
  inputs:
    SourceFolder: '$(Pipeline.Workspace)/d'
    Contents: '**/*.tar.gz'
    RemoveDotFiles: true
