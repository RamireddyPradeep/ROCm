parameters:
# assumption componentName and pipeline name the same
- name: componentName
  type: string
  default: ''
- name: pipelineId
  type: string
  default: ''
- name: useDefaultBranch
  type: boolean
  default: true
# useMainlineBranch only processed if useDefaultBranch is false
- name: useMainlineBranch
  type: boolean
  default: false

- name: branchToUse
  type: string
  default: staging
  values:
    - staging
    - mainline

- name: latestFromBranch
  type: boolean
  default: true
- name: fileFilter
  type: string
  default: ''

- name: branchList
  type: object
  default:
    AMDMIGraphX:
      staging: develop
      mainline: mainline
    amdsmi:
      staging: amd-staging
      mainline: amd-mainline
    aomp-extras:
      staging: aomp-dev
      mainline: amd-mainline-open
    aomp:
      staging: aomp-dev
      mainline: amd-mainline-open
    clr:
      staging: amd-staging
      mainline: amd-mainline
    composable_kernel:
      staging: develop
      mainline: mainline
    half:
      staging: rocm
      mainline: rocm
    HIP:
      staging: amd-staging
      mainline: amd-mainline
    hip-tests:
      staging: amd-staging
      mainline: amd-mainline
    hipBLAS:
      staging: develop
      mainline: mainline
    hipBLASLt:
      staging: develop
      mainline: mainline
    hipBLAS-common:
      staging: develop
      mainline: mainline
    hipCUB:
      staging: develop
      mainline: mainline
    hipFFT:
      staging: develop
      mainline: mainline
    hipfort:
      staging: develop
      mainline: mainline
    HIPIFY:
      staging: amd-staging
      mainline: amd-mainline
    hipRAND:
      staging: develop
      mainline: mainline
    hipSOLVER:
      staging: develop
      mainline: mainline
    hipSPARSE:
      staging: develop
      mainline: mainline
    hipSPARSELt:
      staging: develop
      mainline: mainline
    hipTensor:
      staging: develop
      mainline: mainline
    llvm-project:
      staging: amd-staging
      mainline: amd-mainline-open
    MIOpen:
      staging: develop
      mainline: mainline
    MIVisionX:
      staging: develop
      mainline: mainline
    omniperf:
      staging: amd-staging
      mainline: amd-mainline
    omnitrace:
      staging: amd-staging
      mainline: amd-mainline
    rccl:
      staging: develop
      mainline: mainline
    rdc:
      staging: amd-staging
      mainline: amd-mainline
    rocAL:
      staging: develop
      mainline: master
    rocALUTION:
      staging: develop
      mainline: mainline
    rocBLAS:
      staging: develop
      mainline: mainline
    ROCdbgapi:
      staging: amd-staging
      mainline: amd-mainline
    rocDecode:
      staging: develop
      mainline: mainline
    rocFFT:
      staging: develop
      mainline: mainline
    ROCgdb:
      staging: amd-staging
      mainline: amd-mainline-rocgdb-15
    rocm-cmake:
      staging: develop
      mainline: mainline
    rocm-core:
      staging: amd-staging
      mainline: amd-master
    rocm-examples:
      staging: develop
      mainline: develop
    rocminfo:
      staging: amd-staging
      mainline: amd-master
    rocMLIR:
      staging: develop
      mainline: mainline
    ROCmValidationSuite:
      staging: master
      mainline: mainline
    rocm_bandwidth_test:
      staging: master
      mainline: master
    rocm_smi_lib:
      staging: amd-staging
      mainline: amd-mainline
    rocPRIM:
      staging: develop
      mainline: mainline
    rocprofiler:
      staging: amd-staging
      mainline: amd-master
    rocprofiler-register:
      staging: amd-staging
      mainline: amd-mainline
    rocprofiler-sdk:
      staging: amd-staging
      mainline: amd-mainline
    rocprofiler-systems:
      staging: amd-staging
      mainline: amd-mainline
    rocPyDecode:
      staging: develop
      mainline: mainline
    ROCR-Runtime:
      staging: amd-staging
      mainline: amd-master
    rocRAND:
      staging: develop
      mainline: mainline
    rocr_debug_agent:
      staging: amd-staging
      mainline: amd-mainline
    rocSOLVER:
      staging: develop
      mainline: mainline
    rocSPARSE:
      staging: develop
      mainline: mainline
    rocThrust:
      staging: develop
      mainline: mainline
    roctracer:
      staging: amd-staging
      mainline: amd-master
    rocWMMA:
      staging: develop
      mainline: mainline
    rpp:
      staging: develop
      mainline: mainline

- name: allowPartiallySucceededBuilds
  type: object
  default:
    - amdsmi
    - aomp
    - HIPIFY
    - MIVisionX
    - omniperf
    - rccl
    - rdc
    - rocm-cmake
    - rocm_smi_lib
    - rocFFT
    - rpp
# BELOW REQUIRED IF useDefaultBranch false
- name: branchName
  type: string
  default: '$(Build.SourceBranchName)' # for tagged builds

steps:
- task: DownloadPipelineArtifact@2
  displayName: Download ${{ parameters.componentName }}
  inputs:
    buildType: 'specific'
    project: ROCm-CI
    definition: ${{ parameters.pipelineId }}
    specificBuildWithTriggering: true
    itemPattern: '**/*${{ parameters.fileFilter }}*'
    ${{ if eq(parameters.latestFromBranch, true) }}:
      buildVersionToDownload: latestFromBranch # default is 'latest'
    branchName: refs/heads/${{ parameters.branchList[parameters.componentName][parameters.branchToUse] }}
    ${{ else }}:
      branchName: ${{ parameters.branchName }}
    ${{ if containsValue(parameters.allowPartiallySucceededBuilds, parameters.componentName) }}:
      allowPartiallySucceededBuilds: true
    targetPath: '$(Pipeline.Workspace)/d'
- task: ExtractFiles@1
  displayName: Extract ${{ parameters.componentName }}
  inputs:
    archiveFilePatterns: '$(Pipeline.Workspace)/d/**/*.tar.gz'
    destinationFolder: '$(Agent.BuildDirectory)/rocm'
    cleanDestinationFolder: false
    overwriteExistingFiles: true
- task: DeleteFiles@1
  displayName: Cleanup Compressed ${{ parameters.componentName }}
  inputs:
    SourceFolder: '$(Pipeline.Workspace)/d'
    Contents: '**/*.tar.gz'
    RemoveDotFiles: true
