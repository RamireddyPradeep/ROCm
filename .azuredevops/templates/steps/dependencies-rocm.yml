# download and install rocm dependencies through pipeline builds in the project
# REQUIRED
parameters:
- name: dependencyList
  type: object
  default: []
- name: dependencySource
  type: string
  default: staging
# set to true if you're calling this template file multiple files in same pipeline
# only leave last call false to optimize sequence
- name: skipLibraryLinking
  type: boolean
  default: false
# set to true if llvm-project is not downloaded in a particular call
# or if you just don't want the symlink
- name: skipLlvmSymlink
  type: boolean
  default: false
# some ROCm components can specify GPU target and this will affect downloads
- name: gpuTarget
  type: string
  default: ''
# array of ROCm components that can specify GPU target or have dependency of such a component
# these components would have parallel build jobs per GPU target so they produce multiple artifacts
# only download artifact tied to the GPU target
- name: componentsWithGPUTarget
  type: object
  default:
    - AMDMIGraphX
    - composable_kernel
    - hipBLASLt
    - hipCUB
    - hipFFT
    - hipRAND
    - hipSPARSELt
    - hipTensor
    - omnitrace
    - rccl
    - rocALUTION
    - rocBLAS
    - rocFFT
    - rocm-examples
    - rocPRIM
    - rocprofiler-sdk
    - rocprofiler-systems
    - rocprofiler
    - rocPyDecode
    - rocRAND
    - rocSOLVER
    - rocSPARSE
    - rocThrust
    - roctracer
    - rocWMMA
    - rpp
# list below do not have flag for gpu target but have dependencies of components that do, so build separately per gpu target
    - hipBLAS
    - hipSOLVER
    - hipSPARSE
    - MIOpen
    - MIVision
    - omniperf
    - rocAL
    - ROCmValidationSuite

- name: matrixParamFixer
  type: object
  default:
    staging:
      dependencySource: staging
      buildVersionToDownload: latestFromBranch
      branchToUse: staging
    mainline:
      dependencySource: staging
      buildVersionToDownload: latestFromBranch
      branchToUse: mainline
    tag-builds:
      dependencySource: tag-builds
      buildVersionToDownload: latest
      branchToUse: staging

steps:
# assuming artifact-download.yml template file in same directory
# for the case where rocm dependency item in list has a colon (:)
# assume it is of the format of componentName:fileFilter
# fileFilter could contain both a subcomponent name or gpu name separated by asterisks
# gpu name will be specified by parameters.gpuTarget for components that are in componentsWithGPUTarget
# e.g., gfx942 to only download artifacts from component for this gpu if applicable
- ${{ each dependency in parameters.dependencyList }}:
  - ${{ if contains(dependency, ':') }}:
    - template: artifact-download.yml
      parameters:
        componentName: ${{ split(dependency, ':')[0] }}
        ${{ if containsValue( parameters.componentsWithGPUTarget, split(dependency, ':')[0] ) }}:
          fileFilter: "${{ split(dependency, ':')[1] }}*${{ parameters.gpuTarget }}"
        ${{ else }}:
          fileFilter: ${{ split(dependency, ':')[1] }}

        # dependencySource: ${{ parameters.matrixParamFixer[parameters.dependencySource].dependencySource }}
        # buildVersionToDownload: ${{ parameters.matrixParamFixer[parameters.dependencySource].buildVersionToDownload }}
        # branchToUse: ${{ parameters.matrixParamFixer[parameters.dependencySource].branchToUse }}

        dependencySource: ${{ parameters.matrixParamFixer[parameters.dependencySource].dependencySource }}
        buildVersionToDownload: latestFromBranch
        branchToUse: staging
        # ${{ if eq(parameters.dependencySource, 'staging') }}:
        #   dependencySource: staging
        #   branchToUse: staging
        # ${{ elseif eq(parameters.dependencySource, 'mainline') }}:
        #   dependencySource: staging
        #   branchToUse: mainline
        # ${{ elseif eq(parameters.dependencySource, 'tag-builds') }}:
        #   dependencySource: tag-builds
        #   buildVersionToDownload: latest
# no colon (:) found in this item in the list
  - ${{ else }}:
    - template: artifact-download.yml
      parameters:
        componentName: ${{ dependency }}
        ${{ if containsValue( parameters.componentsWithGPUTarget, dependency ) }}:
          fileFilter: ${{ parameters.gpuTarget }}
        dependencySource: ${{ parameters.matrixParamFixer[parameters.dependencySource].dependencySource }}
        buildVersionToDownload: ${{ parameters.matrixParamFixer[parameters.dependencySource].buildVersionToDownload }}
        branchToUse: ${{ parameters.matrixParamFixer[parameters.dependencySource].branchToUse }}
        # ${{ if eq(parameters.dependencySource, 'staging') }}:
        #   dependencySource: staging
        #   branchToUse: staging
        # ${{ elseif eq(parameters.dependencySource, 'mainline') }}:
        #   dependencySource: staging
        #   branchToUse: mainline
        # ${{ elseif eq(parameters.dependencySource, 'tag-builds') }}:
        #   dependencySource: tag-builds
        #   buildVersionToDownload: latest
# Set link to redirect llvm folder
- ${{ if eq(parameters.skipLlvmSymlink, false) }}:
  - task: Bash@3
    displayName: Symlink from rocm/llvm to rocm/lib/llvm
    inputs:
      targetType: inline
      script: sudo ln -s $(Agent.BuildDirectory)/rocm/llvm $(Agent.BuildDirectory)/rocm/lib/llvm
  - task: Bash@3
    displayName: Symlink executables from rocm/llvm/bin to rocm/bin
    inputs:
      targetType: inline
      script: |
        for file in amdclang amdclang++ amdclang-cl amdclang-cpp amdflang amdlld aompcc mygpu mycpu offload-arch; do
          sudo ln -s $(Agent.BuildDirectory)/rocm/llvm/bin/$file $(Agent.BuildDirectory)/rocm/bin/$file
        done
- task: Bash@3
  displayName: 'List downloaded ROCm files'
  inputs:
    targetType: inline
    script: ls -1R $(Agent.BuildDirectory)/rocm
- ${{ if eq(parameters.skipLibraryLinking, false) }}:
  - task: Bash@3
    displayName: 'Link ROCm shared libraries'
    inputs:
      targetType: inline
# OS ignores if the ROCm lib folder shows up more than once
      script: |
        echo $(Agent.BuildDirectory)/rocm/lib | sudo tee /etc/ld.so.conf.d/rocm-ci.conf
        echo $(Agent.BuildDirectory)/rocm/llvm/lib | sudo tee -a /etc/ld.so.conf.d/rocm-ci.conf
        sudo cat /etc/ld.so.conf.d/rocm-ci.conf
        sudo ldconfig -v
        ldconfig -p
